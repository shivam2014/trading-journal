// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                String            @id @default(uuid())
  name              String?
  email             String           @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  role              UserRole         @default(USER)
  preferredCurrency String           @default("USD")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  trades            Trade[]
  tradeGroups       TradeGroup[]
  preferences       UserPreferences?
  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                String    @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trade {
  id               String            @id @default(uuid())
  userId           String
  brokerTradeId    String
  action           String            // BUY or SELL
  ticker           String
  name             String?
  quantity         Decimal
  price            Decimal
  currency         String
  exchangeRate     Decimal?
  totalAmount      Decimal
  convertedCurrency String?
  convertedAmount   Decimal?
  timestamp        DateTime
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
  tradeGroupEntries TradeGroupEntry[]

  @@unique([userId, brokerTradeId])
  @@index([userId, ticker])
  @@index([timestamp])
}

model TradeGroup {
  id               String            @id @default(uuid())
  userId           String
  ticker           String
  status           String            // OPEN or CLOSED
  entryDate        DateTime
  exitDate         DateTime?
  initialQuantity  Decimal
  remainingQuantity Decimal
  averageEntryPrice Decimal
  averageExitPrice  Decimal?
  realizedPnl      Decimal?
  currency         String
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
  entries          TradeGroupEntry[]
  patterns         TechnicalPattern[]

  @@index([userId])
  @@index([status])
}

model TradeGroupEntry {
  id            String            @id @default(uuid())
  tradeGroupId  String
  tradeId       String
  quantity      Decimal
  createdAt     DateTime          @default(now())
  tradeGroup    TradeGroup        @relation(fields: [tradeGroupId], references: [id])
  trade         Trade             @relation(fields: [tradeId], references: [id])

  @@index([tradeGroupId])
}

model TechnicalPattern {
  id            String            @id @default(uuid())
  tradeGroupId  String
  patternType   String
  confidence    Decimal
  entryPattern  Boolean          @default(false)
  exitPattern   Boolean          @default(false)
  timestamp     DateTime
  metadata      Json?
  createdAt     DateTime         @default(now())
  tradeGroup    TradeGroup       @relation(fields: [tradeGroupId], references: [id])

  @@index([tradeGroupId])
}

model UserPreferences {
  id               String         @id @default(uuid())
  userId           String         @unique
  defaultCurrency  String        @default("USD")
  theme            String        @default("dark")
  chartPreferences Json         @default("{}")
  notificationSettings Json     @default("{}")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
}

model ExchangeRate {
  id            String         @id @default(uuid())
  baseCurrency  String
  quoteCurrency String
  rate          Decimal
  timestamp     DateTime
  createdAt     DateTime      @default(now())

  @@unique([baseCurrency, quoteCurrency, timestamp])
  @@index([baseCurrency, quoteCurrency, timestamp])
}